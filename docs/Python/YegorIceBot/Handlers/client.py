from aiogram import Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State
from aiogram.dispatcher.filters.state import StatesGroup
from aiogram.utils.exceptions import CantRestrictChatOwner
from Handlers.Data import texts
from Handlers.keyboard import kb_client
from Handlers.keyboard import kb_empty
from Handlers.keyboard import kb_help
from Handlers.tools import change_json_file
from Handlers.tools import is_element_authorized
from Handlers.tools import force_unmute
from random import randint


class CaptchaForm(StatesGroup):
    '''Capthca form'''
    captcha = State()
    rules = State()


answer: int = 0


async def command_start(message: types.Message) -> None:
    '''/start command'''
    await message.delete()
    if message.chat.type == 'private':
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç\n–ï–≥–æ—Ä–∞ –õ—å–¥–∞!',
                             reply_markup=kb_client)
    return


async def command_join(message: types.Message) -> None:
    '''–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç'''
    if message.chat.type != 'private':
        return
    if await is_element_authorized(message.from_user.id,
                                   'Data/whitelist.json'):
        await message.answer('–í—ã —É–∂–µ –≤ —á–∞—Ç–µ')
        return

    await message.answer('<b>| –ö–∞–ø—á–∞</b>\n'
                         ' | –î–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —á–∞—Ç –≤–∞–º –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å\n'
                         ' | –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏\n'
                         ' | —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç\n',
                         reply_markup=kb_empty,
                         parse_mode='html')
    await captcha_send(message)
    await CaptchaForm.captcha.set()
    return


async def captcha_send(message: types.Message) -> None:
    global answer
    first_number, second_number = randint(0, 9), randint(0, 9)
    answer = first_number * second_number
    question = await define_number_as_word(first_number, second_number)
    await message.answer(f' | <b>–ß–µ–º—É —Ä–∞–≤–Ω–æ </b> '
                         f'"<i>{question}</i>"?\n'
                         f' | –û—Ç–≤–µ—Ç –¥–∞—Ç—å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 42)',
                         parse_mode='html', reply_markup=kb_empty)
    return


async def captcha_check(message: types.Message, state: FSMContext) -> None:
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏'''
    global answer
    if message.chat.type != 'private':
        return
    if message.text == '–ù–∞–∑–∞–¥ üîô':
        await message.answer('–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç –ø—Ä–µ—Ä–≤–∞–Ω–∞',
                             reply_markup=kb_client)
        await state.finish()
        return
    if not message.text.isdigit():
        await message.answer('–í—ã –¥–∞–ª–∏ –æ—Ç–≤–µ—Ç –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º '
                             '–≤–∏–¥–µ (–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 42)',
                             reply_markup=kb_client)
        await state.finish()
        return
    if int(message.text) != answer:
        await message.answer(
            '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π',
            reply_markup=kb_client)
        await state.finish()
        return
    await CaptchaForm.rules.set()
    await send_rules(message)
    await message.answer('–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏' +
                         ' –Ω–∞–ø–∏—à–∏—Ç–µ "–î–∞"')
    return


async def accept_rules(message: types.Message,
                       state: FSMContext) -> None:
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏'''
    if message.text == '–ù–∞–∑–∞–¥ üîô':
        await message.answer('–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç –ø—Ä–µ—Ä–≤–∞–Ω–∞',
                             reply_markup=kb_client)
        return
    if message.text.lower() in '–¥–∞':
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å... ' +
                             '–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ ... ' +
                             '<—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç>', reply_markup=kb_client)
        await change_json_file(message.from_user.id, 'Data/whitelist.json',
                               append=True)
        try:
            await force_unmute(-1001415548796, message.from_user.id)
        except CantRestrictChatOwner:
            pass
    else:
        await message.answer('–û—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞',
                             reply_markup=kb_client)
    await state.finish()


async def define_number_as_word(first_number: int, second_number: int) -> str:
    numbers = {
        0: '–Ω–æ–ª—å', 1: '–æ–¥–∏–Ω', 2: '–¥–≤–∞', 3: '—Ç—Ä–∏', 4: '—á–µ—Ç—ã—Ä–µ', 5: '–ø—è—Ç—å',
        6: '—à–µ—Å—Ç—å', 7: '—Å–µ–º—å', 8: '–≤–æ—Å–µ–º—å', 9: '–¥–µ–≤—è—Ç—å'
    }
    return numbers[first_number] + ' —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ ' + \
        numbers[second_number]


async def command_links(message: types.Message) -> None:
    '''Show links'''
    if message.chat.type == 'private':
        await message.answer(
            texts.links, parse_mode='html',
            disable_web_page_preview=True)
    return


async def send_rules(message: types.Message) -> None:
    '''Show rules'''
    if message.chat.type == 'private':
        await message.answer(texts.rules, parse_mode='html')
    return


async def command_rules(message: types.Message) -> None:
    await send_rules(message)
    return


async def command_help(message: types.Message) -> None:
    await message.answer('–¢—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è...', reply_markup=kb_help)


async def command_back(message: types.Message) -> None:
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç\n–ï–≥–æ—Ä–∞ –õ—å–¥–∞!',
                         reply_markup=kb_client)


def register_client_handlers(dispatcher: Dispatcher) -> None:
    '''Registers client handlers'''
    dispatcher.register_message_handler(command_start, commands=['start'])
    dispatcher.register_message_handler(command_rules, text='–ü—Ä–∞–≤–∏–ª–∞ üìå')
    dispatcher.register_message_handler(command_join,
                                        text='–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç üåÄ',
                                        state=None)
    dispatcher.register_message_handler(command_links, text='–°—Å—ã–ª–∫–∏ üìã')
    dispatcher.register_message_handler(captcha_check,
                                        state=CaptchaForm.captcha)
    dispatcher.register_message_handler(accept_rules,
                                        state=CaptchaForm.rules)
    dispatcher.register_message_handler(command_help, text='–ü–æ–º–æ—â—å üÜò')
    dispatcher.register_message_handler(command_back, text='–ù–∞–∑–∞–¥ üîô')
